@using Core.Domains
@using PTS.Helpers
@model Core.Domains.User

@{
    ViewBag.Title = "Register";
}

<style>
    div.ui-datepicker
    {
        font-size: 20px;
    }

    .scrollable{
   overflow: auto;
   width: 70px; /* adjust this width depending to amount of text to display */
   height: 80px; /* adjust height depending on number of options to display */
   border: 1px silver solid;
    }

    .scrollable select{
    border: none;
    }

</style>

<hgroup class="demo-panel-title">
    <h2>@ViewBag.Title</h2>
    <h4 style="margin-left: 50px;">Create a new account</h4>
</hgroup>
<br/>
@using (Html.BeginForm(null, null, FormMethod.Post, new { @id="registrationForm"}))
{
    @Html.HiddenFor(model => model.Id)
    @Html.HiddenFor(model => model.LocationId)
    @Html.HiddenFor(model => model.Role)
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.Location.Latitude)
    @Html.HiddenFor(model => model.Location.Longitude)

    <div class="sectionContainer formHolder">
        <div class="container" style="margin-top: 80px; margin-left: 40px;">
            <div style="background-color: #ecf0f1; border-radius: 10px; padding-top: 2px; padding-left: 10px; padding-bottom: 10px;width: 925px;">
                <div class="row">
                    <div class="col-md-3" style="display: inline;">
                        <p>@Html.LabelFor(model => model.Email)</p>
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control email", style = "width:250px;" })
                    </div>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.LabelFor(model => model.PassWord, "Password")</p>
                        @Html.PasswordFor(model => model.PassWord, new { @class = "form-control required", style = "width:250px" })
                    </div>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.Label("Confirm Password")</p>
                        <input type="password" class="form-control required" style="width: 250px" name="confirmPassword" id="confirmPassword" />
                    </div>
                </div>
                <div class="row">
                    <span id="emailerror" hidden="hidden" style="margin-left: 10px; color:red;">Sorry this email is a duplicate.</span>
                    <div class="col-md-3">
                        <p>@Html.LabelFor(model => model.FirstName, "First Name")</p>
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control required", style = "width:250px" })
                    </div>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.LabelFor(model => model.LastName, "Last Name")</p>
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control required", style = "width:250px" })
                    </div>
                    <span id="confirmpassworderror" hidden="hidden" style="margin-left: 10px; color:red;">Passwords do not match.</span>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.LabelFor(model => model.DOB, "Date of Birth")</p>
                        @Html.TextBoxFor(model => model.DOB, new { @class = "form-control required", style = "width:250px" })
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <p>@Html.LabelFor(model => model.SSN, "SSN")</p>
                        @Html.PasswordFor(model => model.SSN, new { @class = "form-control required", style = "width:250px" })
                    </div>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.LabelFor(model => model.Major, "Major")</p>
                        @Html.TextBoxFor(model => model.Major, new { @class = "form-control required", style = "width:250px" })
                    </div>
                    <div class="col-md-3 col-md-offset-1">
                        <p>@Html.LabelFor(model => model.Education, "College/High School")</p>
                        @Html.TextBoxFor(model => model.Education, new { @class = "form-control required", style = "width:250px" })
                    </div>
                </div>
            </div>
            <br />
            <h4>Address</h4>
            <div style="background-color: #ecf0f1; border-radius: 10px; padding-top: 2px; width: 925px;">
                <div class="row" style="margin-left: 15px;">
                    <div class="col-md-3">
                        <div class="form-group">
                            <p>@Html.LabelFor(model => model.Location.Address)</p>
                            @Html.TextBoxFor(model => model.Location.Address, new { @class = "form-control required" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <p>@Html.LabelFor(model => model.Location.Country)</p>
                            @Html.DropDownListFor(model => model.Location.Country, new SelectList(ListHelper.GetListCountries(), "Key", "Value"), new { @id = "Country", @name = "Country", @class = "select-block required", @style = "display: none;", @size = 10 })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group state">
                            <p>@Html.LabelFor(model => model.Location.State)</p>
                            @Html.DropDownListFor(model => model.Location.State, new SelectList(Enum.GetValues(typeof(Core.StateCode))), new { @id = "State", @class = "select-block required", @style = "display: none;" })
                        </div>
                    </div>
                </div>
                <div class="row" style="margin-left: 15px;">
                    <div class="col-md-3">
                        <div class="form-group">
                            <p>@Html.LabelFor(model => model.Location.City)</p>
                            @Html.TextBoxFor(model => model.Location.City, new { @class = "form-control required" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <p>@Html.LabelFor(model => model.Location.ZipCode)</p>
                            @Html.TextBoxFor(model => model.Location.ZipCode, new { @class = "form-control required" })
                        </div>
                    </div>
                </div>
            </div>
            <br />
            <h4>User Role</h4>
            <h6 style="margin-left: 15px;">Registering as a teacher or tutor?</h6>

            <div style="background-color: #ecf0f1; border-radius: 10px; padding-top: 2px; width: 925px;">
                <div class="row" style="margin-top: 60px; margin-left: 15px;">
                    <div class="col-md-1">
                        <label class="checkbox unchecked" for="checkbox2">
                            <span class="icons">
                                <span class="first-icon fui-checkbox-unchecked"></span>
                                <span class="second-icon fui-checkbox-checked"></span>
                            </span>
                            <input type="checkbox" value="" id="checkbox2" data-toggle="checkbox" />
                        </label>
                    </div>
                    <div class="col-md-1">
                        <p>Teacher/Tutor</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2 col-md-offset-1">
                        <div class="teacherUser">
                            @{
                                var teacher = new PTS.Models.TeacherScheduleModel();
                                teacher.Schedule = new Schedule();
                            }

                            @Html.Partial("_TeacherUserForm", teacher)
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br />
        <div class="row" style="margin-top: 10px; margin-left: 37px;">
            <div class="col-md-1">
                <button id="formSubmit" type="button" class="btn btn-primary">Register</button>
            </div>
        </div>
    </div>
    @Html.HiddenFor(model => model.Location.Latitude)
    @Html.HiddenFor(model => model.Location.Longitude)
}
<body onload="initialize()"></body>
<script src="~/Content/Flat-UI/js/flatui-checkbox.js"></script>
<script src="~/Content/Flat-UI/js/bootstrap-select.js"></script>
<script src="~/Content/Flat-UI/js/bootstrap-switch.js"></script>
<script src="~/Content/Flat-UI/js/bootstrap.min.js"></script>
<script type="text/javascript">
    var geocoder;

    function initialize() {
        geocoder = new google.maps.Geocoder();
    }

    function codeAddress(callback) {
        var address = $('#Location_Address').val() + ' ' + $('#Location_City').val() + ' ' + $('#State').val() + ' ' + $('#Location_ZipCode').val() + ' ' + $('#Country');
        console.log(address);
        geocoder.geocode({ 'address': address }, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {

                var marker = new google.maps.Marker({
                    position: results[0].geometry.location
                });

                var latitude = results[0].geometry.location.lat();
                var longitude = results[0].geometry.location.lng();
                console.log(latitude);
                console.log(longitude);

                $('#Location_Latitude').prop('value', latitude);
                $('#Location_Longitude').prop('value', longitude);

                callback();
            } else {
                $('#Location_Latitude').prop('value', 32.7050);
                $('#Location_Longitude').prop('value', -97.1228);

                callback();
            }
        });
    }

    $(document).ready(function () {
        //$('#Location_ZipCode').focusout(function () {
        //    codeAddress();
        //});
        $('#Email').focusout(function () {
            $.ajax({
                url: '@Url.Action("CheckUsername")',
                data: { username: $('#Email').val() },
                success: function (emailData) {
                    console.log(emailData);
                    if (emailData == 'True') {
                        $('#emailerror').show();
                        $('#Email').addClass('duplicate');
                    } else {
                        $('#emailerror').hide();
                        $('#Email').removeClass('duplicate');
                    }
                }
            });
        });

        $('#confirmPassword').focusout(function () {
            if (($('#PassWord').val()) != ($('#confirmPassword').val())) {
                $('#confirmpassworderror').show();
                $('#PassWord').addClass('passwordmatch');
            } else {
                $('#confirmpassworderror').hide();
                $('#PassWord').removeClass('passwordmatch');
            }  
        });
        

        $("#registrationForm").validate({
            errorClass: 'glow',
            errorPlacement: function () { },
            rules: {
                field: {
                    required: true,
                    email: true
                }
            }
        });

        $('#formSubmit').on('click', function () {
            MarkErrorsRegisterForm();
            
            if ($('#registrationForm').valid() && !($('#Email').hasClass('duplicate')) && !($('#PassWord').hasClass('passwordmatch'))) {
                codeAddress(function () {
                    $('#registrationForm').submit();
                });
            }
        });
        $('#DOB').datepicker({
            changeMonth: true,
            changeYear: true,
            yearRange: "1920:2013",
            maxDate: "0"
        });
        $("select[name='Location.Country']").selectpicker({ style: 'btn-primary', size: 10, menuStyle: 'dropdown-inverse' });
        $("select[name='Location.State']").selectpicker({ style: 'btn-primary', size: 10, menuStyle: 'dropdown-inverse' });
        $(".teacherUser").hide();
    });

    $("#Country").on('change', function() {
        if ($(this).val() == "United States") {
            $('.state').hide();
        } else {
            $('.state').show();
        }
    });

    $("#checkbox2").change(function () {
        if ($(this).is(":checked")) {
            $(".teacherUser").show();
            $('#Role').val("@UserRole.Teacher");
        } else {
            $(".teacherUser").hide();
            $('#Role').val("@UserRole.Student");
        }
    });

    function MarkErrorsRegisterForm() {
        $("#registrationForm").valid();
        if (!$('#registrationForm').valid()) {
            // $("#SaveUserButton").qtip(ErrorTip("Please check the highlighted fields.")).qtip("show");
        }
    }
</script>
